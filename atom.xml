<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PtBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://removeif.github.io/"/>
  <updated>2020-06-04T05:28:25.375Z</updated>
  <id>https://removeif.github.io/</id>
  
  <author>
    <name>Ptmapo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vpy加密视频破解转mp4-JAVA代码实现</title>
    <link href="https://removeif.github.io/2020/06/04/share/vpy%E5%8A%A0%E5%AF%86%E8%A7%86%E9%A2%91%E7%A0%B4%E8%A7%A3%E8%BD%ACmp4-JAVA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://removeif.github.io/2020/06/04/share/vpy%E5%8A%A0%E5%AF%86%E8%A7%86%E9%A2%91%E7%A0%B4%E8%A7%A3%E8%BD%ACmp4-JAVA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-06-04T04:21:28.000Z</published>
    <updated>2020-06-04T05:28:25.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vpy加密视频破解转mp4-JAVA代码实现"><a href="#vpy加密视频破解转mp4-JAVA代码实现" class="headerlink" title="vpy加密视频破解转mp4-JAVA代码实现"></a>vpy加密视频破解转mp4-JAVA代码实现</h3><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHex</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件转字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] fileToByte(String filePath) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bFile = Files.readAllBytes(<span class="keyword">new</span> File(filePath).toPath());</span><br><span class="line">            <span class="keyword">return</span> bFile;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 16进制string转字节数组</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toBytes(String str) &#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span> || str.trim().equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[str.length() / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length() / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            String subStr = str.substring(i * <span class="number">2</span>, i * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">            subStr=xor(subStr,<span class="string">"05"</span>);</span><br><span class="line">            bytes[i] = (<span class="keyword">byte</span>) Integer.parseInt(subStr, <span class="number">16</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试字节数组完整性  #取消</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writerFile</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">            BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                File file = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\qqq\\Desktop\\新建文件夹\\test.txt"</span>);</span><br><span class="line">                <span class="comment">/* 先创建文件*/</span></span><br><span class="line">                <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                    file.createNewFile();</span><br><span class="line">                &#125;</span><br><span class="line">                FileWriter fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">                bw = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line">                bw.write(<span class="string">""</span>);</span><br><span class="line">                bw.write(str);</span><br><span class="line">                System.out.println(<span class="string">"写入成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                ioe.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(bw != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        bw.close();&#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"Error in closing the BufferedWriter"</span> + ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异或</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strHex_X</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strHex_Y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">xor</span><span class="params">(String strHex_X,String strHex_Y)</span></span>&#123;</span><br><span class="line">        <span class="comment">//将x、y转成二进制形式</span></span><br><span class="line">        String anotherBinary=Integer.toBinaryString(Integer.valueOf(strHex_X,<span class="number">16</span>));</span><br><span class="line">        String thisBinary=Integer.toBinaryString(Integer.valueOf(strHex_Y,<span class="number">16</span>));</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">//判断是否为8位二进制，否则左补零</span></span><br><span class="line">        <span class="keyword">if</span>(anotherBinary.length() != <span class="number">8</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = anotherBinary.length(); i &lt;<span class="number">8</span>; i++) &#123;</span><br><span class="line">                anotherBinary = <span class="string">"0"</span>+anotherBinary;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(thisBinary.length() != <span class="number">8</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = thisBinary.length(); i &lt;<span class="number">8</span>; i++) &#123;</span><br><span class="line">                thisBinary = <span class="string">"0"</span>+thisBinary;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//异或运算</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;anotherBinary.length();i++)&#123;</span><br><span class="line">            <span class="comment">//如果相同位置数相同，则补0，否则补1</span></span><br><span class="line">            <span class="keyword">if</span>(thisBinary.charAt(i)==anotherBinary.charAt(i)) &#123;</span><br><span class="line">                result += <span class="string">"0"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                result+=<span class="string">"1"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.toHexString(Integer.parseInt(result, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字节数组转文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getFileByBytes</span><span class="params">(<span class="keyword">byte</span>[] bytes, String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        File file = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File dir = <span class="keyword">new</span> File(filePath);</span><br><span class="line">            <span class="keyword">if</span> (!dir.exists() &amp;&amp; dir.isDirectory()) &#123;<span class="comment">// 判断文件目录是否存在</span></span><br><span class="line">                dir.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            file = <span class="keyword">new</span> File(filePath + <span class="string">"\\"</span> + fileName);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">            bos.write(bytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字节数组转16进制String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">bytesToHexFun3</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        StringBuilder buf = <span class="keyword">new</span> StringBuilder(bytes.length * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">byte</span> b : bytes) &#123;</span><br><span class="line">            <span class="comment">// 使用String的format方法进行转换</span></span><br><span class="line">            buf.append(String.format(<span class="string">"%02x"</span>, <span class="keyword">new</span> Integer(b &amp; <span class="number">0xff</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buf.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beforeFilePath    原始文件目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath      转换完成后的文件目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName      转换完成后的新文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">vpyToMP4</span><span class="params">(String beforeFilePath,String filePath,String fileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取文件初始字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] arr = fileToByte(beforeFilePath);</span><br><span class="line">        <span class="comment">//获取字节数组中的16进制字符串</span></span><br><span class="line">        String hexStr = bytesToHexFun3(arr);</span><br><span class="line">        <span class="comment">//截取050505后的16进制</span></span><br><span class="line">        hexStr = hexStr.substring(hexStr.indexOf(<span class="string">"050505"</span>), hexStr.length());</span><br><span class="line">        <span class="comment">//转换回字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = toBytes(hexStr);</span><br><span class="line">        getFileByBytes(bytes, filePath, fileName);</span><br><span class="line">        System.out.println(fileName+<span class="string">"-----转换完成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vpy加密视频破解转mp4-JAVA代码实现&quot;&gt;&lt;a href=&quot;#vpy加密视频破解转mp4-JAVA代码实现&quot; class=&quot;headerlink&quot; title=&quot;vpy加密视频破解转mp4-JAVA代码实现&quot;&gt;&lt;/a&gt;vpy加密视频破解转mp4-JAVA代码实现&lt;/h3&gt;
    
    </summary>
    
    
      <category term="技术分享" scheme="https://removeif.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="技术分享" scheme="https://removeif.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>20200516 每日记录</title>
    <link href="https://removeif.github.io/2020/06/04/diary/20200516%20/"/>
    <id>https://removeif.github.io/2020/06/04/diary/20200516%20/</id>
    <published>2020-06-04T04:10:14.000Z</published>
    <updated>2020-06-04T07:13:25.456Z</updated>
    
    <content type="html"><![CDATA[<p><strong>每日记录</strong></p><a id="more"></a><p><strong>1 mybatis映射文件中的autoMapping用处是什么</strong></p><p>自动映射</p><p><strong>2  多表联查</strong></p><p><strong>3</strong></p><p><u><strong>varStatus</strong></u>是&lt;c:forEach&gt;jstl循环标签的一个属性，varStatus属性。就拿varStatus=“status”来说，事实上定义了一个status名的对象作为varStatus的绑定值。该绑定值也就是status封装了当前遍历的状态，比如，可以从该对象上查看是遍历到了第几个元素：${status.count}</p><p><strong>4</strong> 是第一次回调函数后的for循环中，如果你再次发送请求，for循环并不会停止，即使你写了同步请求也不行。</p><p>但是如果你在声明for循环变量用let后，代码会直到你请求完毕，回调函数执行完毕后，再进行下一次的循环。</p><p>这就考虑到了一个闭包的问题，如果你写var和let声明的作用域不同。</p><p><strong><u>let</u></strong> i 会以局部变量的形式传递</p><p><u><strong>var</strong></u> i 会以全局变量的形式传递</p><p>如果要想将 i 变量传递给下一层，要使用let 去声明。</p><p><strong>5 判断几个选项是否有选择一项 （校验）</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-0e25e5eb4013c6fbfb862b4e48e23b4143a.png" alt="img"></p><p><strong>6 frameset标签不能和body共存 ？？？</strong></p><p>FRAMESET 元素是 FRAME 元素的容器。HTML 文档可包含 FRAMESET 元素或 BODY 元素之一，而不能同时包含两者。</p><p><strong>7  n+1</strong></p><p> select语句的数目太多，需要频繁的访问数据库，会影响检索性能。如果需要查询n个Customer对象，那么必须执行<u>n+1次</u>select查询语句。这就是经典的n+1次select查询问题。 这种检索策略没有利用SQL的连接查询功能</p><p><strong>8， forward和redirect的区别</strong></p><p>forward 重定向:</p><p>1,重定向会改变浏览器地址栏地址</p><p>2,重定向不止可以访问服务器内的资源,还可以访问外部连接</p><p>3重定向因为是两次请求,所以重定向不能使用request来访问资源和共享数据,因为request的作用域是一次请求内,</p><p>redirect 请求转发:</p><p>1,不会改变浏览器地址栏信息</p><p> 2,只能访问服务器内部资源</p><p> 3,是一次请求.所以可以使用request共享数据 </p><p><strong>9. resultMap标签</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-877248f913d41e5733bf0aa30ddbc5077ff.png" alt="img"></p><p><strong>10  /**</strong></p><p>/* 是拦截所有的文件夹，不包含子文件夹</p><p>/** 是拦截所有的文件夹及里面的子文件夹</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;每日记录&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="每日记录" scheme="https://removeif.github.io/categories/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95/"/>
    
      <category term="ssm" scheme="https://removeif.github.io/categories/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95/ssm/"/>
    
    
      <category term="每日记录，ssm" scheme="https://removeif.github.io/tags/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95%EF%BC%8Cssm/"/>
    
  </entry>
  
  <entry>
    <title>mysql之DQL</title>
    <link href="https://removeif.github.io/2020/06/03/mysql/mysq%E4%BA%8C%20DQL/"/>
    <id>https://removeif.github.io/2020/06/03/mysql/mysq%E4%BA%8C%20DQL/</id>
    <published>2020-06-03T13:22:32.000Z</published>
    <updated>2020-06-04T04:49:44.436Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DQL-数据查询语言"><a href="#DQL-数据查询语言" class="headerlink" title="DQL(数据查询语言)"></a>DQL(数据查询语言)</h3><ul><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 列名(多列间逗号，全部列用*) from 表名 [where 过滤条件 group by 分组查询 having 分组后的过滤 order by 排序 limit 分页];</span><br></pre></td></tr></table></figure><a id="more"></a></li></ul><h4 id="1-简单的条件条件查询："><a href="#1-简单的条件条件查询：" class="headerlink" title="1.简单的条件条件查询："></a><strong>1.简单的条件条件查询：</strong></h4><ul><li>查询所有数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student(表名)</span><br></pre></td></tr></table></figure><ul><li>带条件查询</li></ul><p>可以使用的条件：&lt; , &lt;= , = , &gt; , &gt;= , != , &lt;&gt; , in , between…and… , and , or ,not , is null , like 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">-- 查询编号为1004的学生的姓名和生日  </span><br><span class="line">    select name,birthday from student where id&#x3D;1004;</span><br><span class="line">-- 查询年龄大于18的学生信息  </span><br><span class="line">    select * from student where age&gt;18;</span><br><span class="line">-- 查询小明的成绩  </span><br><span class="line">select name,score from student where name&#x3D;&#39;小明&#39;;</span><br><span class="line">-- 查询年龄在18到20之间的所有学生  </span><br><span class="line">    select * from student where age&gt;18 and age&lt;20;</span><br><span class="line">    select * from student where age between 18 and 20; </span><br><span class="line">-- 查询除了1003外的所有学生信息  </span><br><span class="line">    select * from student where id !&#x3D; 1003;</span><br><span class="line">    select * from student where id &lt;&gt; 1003;</span><br><span class="line">-- 查询编号为1005或者年龄为18的学生信息  </span><br><span class="line">    select * from student where id&#x3D;1005 or age&#x3D;18;</span><br><span class="line">-- 查询编号为1003和编号为1005的学生信息  </span><br><span class="line">    select * from student where id&#x3D;1003 and id&#x3D;1005;</span><br><span class="line">    select * from student where id in(1003,1005);</span><br><span class="line">-- 查询编号不是1003和1005的学生信息  </span><br><span class="line">    select * from student where id not in(1003,1005);</span><br><span class="line">-- 查询所有姓张的学生信息, 可以使用like关键字进行模糊查询  </span><br><span class="line">   --like关键字需要配合通配符使用  </span><br><span class="line">   --通配符有两个: %(任意个任意字符), _(任意一个字符)  </span><br><span class="line">    select * from student where name like &#39;张%&#39;;</span><br><span class="line">-- 查询名字中带国的学生信息  </span><br><span class="line">    select * from student where name like &#39;%国%&#39;;</span><br><span class="line">-- 查询名字第二个字符为明的学生信息  </span><br><span class="line">    select * from student where name like &#39;_明%&#39;;</span><br><span class="line">-- 查询缺考学生的信息, score没有值, 不是为0  </span><br><span class="line">    select * from student where score is null;</span><br><span class="line">-- 查询没有缺考的学生信息  </span><br><span class="line">    select * from student where score is not null;</span><br><span class="line">    select * from student where not score is null;</span><br></pre></td></tr></table></figure><h4 id="2-select子句"><a href="#2-select子句" class="headerlink" title="2.select子句"></a>2.select子句</h4><p>select子句的作用是选择要查询的列，还包括以下功能：</p><ul><li>可以在select子句中进行运算；</li><li>可以用distinct过滤重复的行数据；</li><li>可以给列起别名。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 运算  </span><br><span class="line">-- null不参与运算, 结果都是null  </span><br><span class="line">   select name,score,scoer+10 from student;</span><br><span class="line">-- 可以给列定义别名, 使用as关键字, 可以省略  </span><br><span class="line">-- 别名最好不要出现特殊字符, 中文也不建议使用  </span><br><span class="line">   select name, score, score+10 as new_score from student;  </span><br><span class="line">   select name, score, score+10 new_score from student;  </span><br><span class="line">   select name, score, score+10 &#39;成绩&#39; from student; </span><br><span class="line">-- ifnull函数，类似于java中的三目运算符，用于处理空值null，如果某个字段为null，则使用给定的值进行替换</span><br><span class="line">   select name, score, IFNULL(score,0)+10 new_score from student;  </span><br><span class="line">-- 查询所有学生的年龄  </span><br><span class="line">   select distinct age from student;</span><br></pre></td></tr></table></figure><h4 id="3-排序"><a href="#3-排序" class="headerlink" title="3.排序"></a>3.排序</h4><p>使用order by子句可以进行结果的排序，需要配合两个关键字一起使用：</p><p>​      ASC ，升序 ，ascending （ 默认值 ）</p><p>​      DESC ，降序 , descending 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--查询所有学生信息，按照id进行升序排序</span><br><span class="line">  select * from student order by id asc;</span><br><span class="line">--查看年龄为20的学生信息，按照id降序排序</span><br><span class="line">  select * from student order by id desc;</span><br><span class="line">--可以按照别名进行排序</span><br><span class="line">--查询所有学生的新成绩，并按照新成绩排名</span><br><span class="line">  select name,score+10 new_score from student order by new_score desc;</span><br><span class="line">--order by 后可以写数字，代表第几列(一般不用) </span><br><span class="line">  select * from student order by 6;</span><br><span class="line">--rand（）函数，生成随机数，范围是[0，1）</span><br><span class="line">--配合rand函数可以进行数据的随机排序，打乱数据,洗牌.</span><br><span class="line">  select * from student order by rand();</span><br><span class="line">--查询所有学生的信息，按照年龄降序排序，如果年龄相同，再按照id降序排序</span><br><span class="line">  select * from student order by age desc,id desc;</span><br></pre></td></tr></table></figure><h4 id="4-分组函数"><a href="#4-分组函数" class="headerlink" title="4.分组函数"></a>4.分组函数</h4><p>分组函数用于对查询结果进行统计，共有5个，返回结果是一个值。count() ，sum()，max()，min()，avg()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--分组函数使用时，null值不进行统计</span><br><span class="line">--统计所有学生的人数</span><br><span class="line">  select count(*) from student;</span><br><span class="line">  select count(id) from student;</span><br><span class="line">--查询总分，最低分数和最高分数及平均分数</span><br><span class="line">  select sum(score),min(score),max(score),avg(score) from student;</span><br></pre></td></tr></table></figure><h4 id="5-分组查询"><a href="#5-分组查询" class="headerlink" title="5.分组查询"></a>5.分组查询</h4><p>分组查询使用group by子句实现，分组查询后需要注意以下几点：</p><p>​    1.select子句只能查询分组字段和分组函数。</p><p>​    2.可以使用where在分组前条件过滤。</p><p>​    3.可以使用having在分组后进行条件过滤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 按照性别进行分组, 分别统计男女同学的人数和平均成绩</span><br><span class="line">   select gender,count(*) cnt,avg(score) avg_score from student group by gender;</span><br><span class="line">-- 按照性别进行分组，分别统计男女同学的人数和平均成绩，排除成绩低于70的学生信息</span><br><span class="line">   select gender,count(*) cnt,avg(score) avg_score from student where score&gt;&#x3D;70 group by gender; </span><br><span class="line">-- 按照年龄进行分组，分别统计不同年龄同学的人数和平均成绩，排除人数小于2的分组信息</span><br><span class="line">-- where和having的区别在于where中无法使用分组函数，而having中可以使用</span><br><span class="line">   select age, count(*) cnt, avg(score) avg_score from student group by age having count(*)&gt;&#x3D;2;</span><br><span class="line">   select age, count(*) cnt, avg(score) avg_score from student group by age having cnt&gt;&#x3D;2;</span><br></pre></td></tr></table></figure><h4 id="6-分页查询"><a href="#6-分页查询" class="headerlink" title="6.分页查询"></a>6.分页查询</h4><p>  MySQL中，可以通过limit关键词实现分页查询，limit是MySQL的特有语法，limit后面需要跟两个参数，第一个参数是查询的起始索引（从0开始），第二个参数是查询的记录数，limit必须出现在SQL的末尾。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--每页显示两条学生信息，完成分页显示</span><br><span class="line">--page：第几页</span><br><span class="line">--size：每页显示几条数据</span><br><span class="line">  select * from student order by id limit (page-1) * size, size;</span><br><span class="line">--第一页</span><br><span class="line">  select * from student order by id limit 0,2;</span><br><span class="line">--第二页</span><br><span class="line">  select * from student order by id limit 2,2;</span><br><span class="line">--第三页</span><br><span class="line">  select * from student order by id limit 4,2;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;DQL-数据查询语言&quot;&gt;&lt;a href=&quot;#DQL-数据查询语言&quot; class=&quot;headerlink&quot; title=&quot;DQL(数据查询语言)&quot;&gt;&lt;/a&gt;DQL(数据查询语言)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;语法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select 列名(多列间逗号，全部列用*) from 表名 [where 过滤条件 group by 分组查询 having 分组后的过滤 order by 排序 limit 分页];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://removeif.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://removeif.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql 基础知识及DDL,DML</title>
    <link href="https://removeif.github.io/2020/06/02/mysql/mysql-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%8F%8ADDL-DML/"/>
    <id>https://removeif.github.io/2020/06/02/mysql/mysql-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%8F%8ADDL-DML/</id>
    <published>2020-06-02T09:03:13.000Z</published>
    <updated>2020-06-04T04:51:44.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MYSQL基础"><a href="#MYSQL基础" class="headerlink" title="MYSQL基础"></a>MYSQL基础</h2><p>  cmd操作指令：mysql -u用户名 -p密码 -h主机地址 -P端口号<br>  -u ：user<br>  -p ：password  隐式输入无需在-p后加密码<br> -h  ：host   默认是localhost<br> -P  ：port   mysql默认是3306</p><p><strong>定义</strong></p><a id="more"></a><p>SQL： Structured Query language    结构化查询语言</p><p><strong>规范</strong></p><p>一条语句要以分号（;）结束</p><p>sql可以单行和多行书写，一般通过缩进和换行书写提高代码可读性</p><p>sql的关键词一般都要全大写</p><p><strong>分类</strong></p><p><strong>DDL</strong>（Data Defination Language）  数据定义语言 </p><p>用于操作数据库常用对象，例如数据库 表格等，常用的关键字：CREATE（创建）； ALTER（修改）  ； DROP（删除）等</p><p><strong>DML</strong>（Data Manipulation Language）数据操作语言</p><p>用于对表格进行增删改操作，常用关键字：INSERT（增）  ； DELETE（删）  ；  UPDATE （改）等</p><p><strong>DQL</strong>（Data Query Language） 数据查询语言</p><p>用于对表格进行查询操作 ，常用关键字： SELECT（查）  ； WHERE（条件）  ；  FROM（位置）等</p><p><strong>DCL</strong>（Data Control Language） 数据控制语言</p><p>用于对权限的控制 ，常用关键字 ： GRANT(授权)   REVOKE（撤销）</p><h3 id="操作Database"><a href="#操作Database" class="headerlink" title="操作Database"></a>操作Database</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看所有的database</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure><p><strong>创建database</strong></p><pre><code>- 直接创建：create database 名称;- 指定编码方式创建： create database 名称 character set utf8;- 如果数据库不存在则创建：create database if not exists 名称;</code></pre><p><strong>使用database</strong><br>     - use 数据库名<br> <strong>修改database</strong><br>     - alter database 名称 character set gbk;<br><strong>删除database</strong><br>     - 直接删除：drop database 名称;<br>    - 如果存在则删除：drop database if exists 名称;</p><h3 id="操作table"><a href="#操作table" class="headerlink" title="操作table"></a>操作table</h3><p>*<em>1.查询当前database下所有可用的table   *</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p><strong>2.mysql中常用的数据类型</strong></p><p><strong>在MySQL中，有三种主要类型：Text（文本），Number（数字），Date/Time（日期/时间）类型。</strong></p><p><strong>Text类型：</strong></p><ul><li>常用类型：<ul><li>CHAR(size) ：括号中指定字符串长度，最多255个字符。不可变字符串，性能好，但占用空间是固定的。</li><li>VARCHAR(size)：括号中指定字符串长度，最多255个字符可变字符串，如果长度大于255则被转换为TEXT类型。可变字符串性能差，但占用空间是可变的。</li><li>TEXT ：不需要指定长度，用于存放大文本数据。</li></ul></li></ul><p><strong>Number类型</strong></p><ul><li>常用类型：<ul><li>INT(size)：括号中指定最大位数。4个字节。</li><li>TINYINT(size)：-128到127。0到255 无符号。括号中指定最大位数。1个字节，如果长度为1，通常用于表示boolean，1-&gt;true,  0-&gt;false。</li><li>BIGINT(size)：括号中指定最大位数，8个字节。</li><li>FLOAT(size,d)：size指定最大位数，d指定小数点右侧的最大位数。存放带有浮动小数点的小数字，4个字节。</li><li>DOUBLE(size,d)：size指定最大位数，d指定小数点右侧的最大位数。存放带有浮动小数点的大数字，8个字节。</li></ul></li></ul><p><strong>Date/Time类型：</strong><br>常用类型：<br>DATE() ：格式：YYYY-MM-DD  年月日。<br>DATE() ：格式：YYYY-MM-DD HH : MM : SS   年月日时分秒。<br><strong>3.创建表格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table 表名 （</span><br><span class="line"></span><br><span class="line">        列名 列类型，</span><br><span class="line"></span><br><span class="line">        列名 列类型，    </span><br><span class="line"></span><br><span class="line">        列名 列类型</span><br><span class="line"></span><br><span class="line">）;</span><br></pre></td></tr></table></figure><p><strong>4.查看表格结构</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名字；</span><br></pre></td></tr></table></figure><p><strong>5.修改表格</strong></p><ul><li><p>修改表名</p><pre><code>alter table 原表名 rename to 新表名；</code></pre></li><li><p>修改字段（列）的类型</p><pre><code>alter table 表名 modify 列名 类型；</code></pre></li><li><p>修改字段名 </p><pre><code>alter table 表名 change 原列名 新列名 类型；</code></pre></li><li><p>增加字段</p><pre><code>alter table 表名 add（列名 类型，....）;</code></pre></li><li><p>删除字段</p><pre><code>alter table 表名 drop column 列名;</code></pre></li></ul><p><strong>6.删除表格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table [if exists] 表名;</span><br></pre></td></tr></table></figure><h3 id="DML操作"><a href="#DML操作" class="headerlink" title="DML操作"></a>DML操作</h3><p><strong>新增数据：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into (列名1，列名2，列名3) values (值1，值2，值3);</span><br></pre></td></tr></table></figure><p>列和值要一一对应,多个数据逗号隔开。</p><p>列可以省略，表示所有的列都要增加数据</p><p>数据的类型要和列的类型一致，除了数字以外，其他数据都需要加引号（单引号或双引号）</p><p><strong>修改数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set 列1&#x3D;值1，列2&#x3D;值2 [where 条件];</span><br></pre></td></tr></table></figure><p><strong>删除数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dalete from 表名 [where 条件];        效率低可回滚。</span><br><span class="line">truncate table 表名;       如果要删除整个表的数据，建议使用truncate。效率高不可回滚。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MYSQL基础&quot;&gt;&lt;a href=&quot;#MYSQL基础&quot; class=&quot;headerlink&quot; title=&quot;MYSQL基础&quot;&gt;&lt;/a&gt;MYSQL基础&lt;/h2&gt;&lt;p&gt;  cmd操作指令：mysql -u用户名 -p密码 -h主机地址 -P端口号&lt;br&gt;  -u ：user&lt;br&gt;  -p ：password  隐式输入无需在-p后加密码&lt;br&gt; -h  ：host   默认是localhost&lt;br&gt; -P  ：port   mysql默认是3306&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://removeif.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://removeif.github.io/tags/mysql/"/>
    
  </entry>
  
</feed>
