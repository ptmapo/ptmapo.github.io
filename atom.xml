<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PtBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ptmapo.github.io/"/>
  <updated>2020-06-11T15:08:38.296Z</updated>
  <id>https://ptmapo.github.io/</id>
  
  <author>
    <name>Ptmapo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>readBook</title>
    <link href="https://ptmapo.github.io/2020/06/11/other/readBook/"/>
    <id>https://ptmapo.github.io/2020/06/11/other/readBook/</id>
    <published>2020-06-11T14:51:09.000Z</published>
    <updated>2020-06-11T15:08:38.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《如何阅读一本书》读书笔记"><a href="#《如何阅读一本书》读书笔记" class="headerlink" title="《如何阅读一本书》读书笔记"></a>《如何阅读一本书》读书笔记</h2><a id="more"></a><p>本书的开篇指出了任何一种阅读都是一种活动，因此必须要有一些主动的活力。很多人在阅读的时候，常常没读多久就开始出现双眼停滞、头脑昏睡的状况，这种精神不济的状态根本无法将阅读进行下去。作者认为，人们之所以出现这种现象，是因为阅读缺乏主动性。</p><p>完全被动的阅读只会越读越疲惫，越读越乏味，直至放弃阅读。所以，预备开始阅读的人首先要认识到的是：<strong>阅读是一件主动的事情，阅读越主动，效果越好。</strong></p><p>既然阅读是一种活动，那么也必有活动的目的。<strong>阅读的目的可分为两种：第一种是为获得资讯而读，第二种是为求得理解而读。</strong></p><p>阅读与自身知识水平相当的书，那么阅读的目的就只是为了获得这本书所载录的信息而已。阅读高于自身知识水平的书，并试图读懂读透它，向自己现有的理解力发起挑战，则是阅读的另一种目的——提升理解力。</p><p>这本书所针对的读者就是那些想把读书的主要目的当作是增进理解能力的人而写。<strong>在没有任何外力的帮助的情况下，只凭着内心的力量，玩味着眼前的字句，慢慢地提升自己，从只有模糊的概念到更清楚地理解为止。以一己之力来提升自我，从粗浅的了解推进到深入的理解，认知自我破茧而出。</strong></p><p>好的阅读者应该具备敏锐的观察力、灵敏可靠的记忆、想象的空间，以及训练有素的分析、省思能力。然而并不是所有阅读的人都拥有这些阅读能力，但好在这些能力和技巧是可以通过学习和训练而获得的，答案和秘诀就藏在这本阅读圣经里。</p><h3 id="01-如何把握一本书的基础架构并了解全书内容"><a href="#01-如何把握一本书的基础架构并了解全书内容" class="headerlink" title="01.如何把握一本书的基础架构并了解全书内容"></a><strong>01.如何把握一本书的基础架构并了解全书内容</strong></h3><p>《如何阅读一本书》将阅读分为四个层次，分别是：<strong>基础阅读、检视阅读、分析阅读、主题阅读</strong>。之所以称作层次而不是方法或类别，是因为四个层次之间呈递进与包含的关系。也就是说，<strong>阅读的层次是渐进的</strong>。第二层阅读是建立在第一层阅读的基础上，而第三层由建立在第二层之上，而最高的层次第四层则包括了之前的所有阅读层次。</p><p>首先来了解阅读的第一个层次：基础阅读。这是阅读层次中最基础的一层，以识文断字为主要目的，阅读时能够清晰的知道作者是在说什么。<strong>这本书所针对的人群是已经至少具备基础阅读能力的阅读者。</strong></p><p>第二个阅读层次是<strong>检视阅读。目的是在最短的时间内，对全书最好最重要的内容快速的阅读并掌握。</strong>这一层次是建立在读者已经具备第一层阅读能力的基础上，以增进理解力为目标的读者必须掌握这个层次的阅读方法。</p><p>检视阅读有两个阶段：</p><p><strong>第一个阶段是有系统的略读或粗读，用最经济的方法了解一本书的架构，判断这本书值不值得花时间仔细阅读。</strong>拿到一本书，首先翻看书籍的书名页、 序、目录页、索引、出版者的介绍这些内容。挑选几个与主题相关的篇章阅读，留意主题的基本脉动，以及书籍结尾记载着作者自认为既新又重要的观点的三四页。</p><p><strong>第二个阶段是粗浅的阅读，面对一本难读的书的时候，从头到尾先读完一遍，碰到不懂的地方不要停下来查询或思索，了解全书内容。</strong></p><p>在完成检视阅读的过程中，读者要完成<strong>四个问题</strong>：</p><p>（1）<strong>这本书到底在谈些什么？</strong>找出这本书的主题，作者如何依次发展这个主题，如何逐步从核心主题分解出从属的关键议题来。</p><p>（2）<strong>作者详细说了什么，怎么说的？</strong>找出主要的想法、声明与论点。这些组合成作者想要传达的特殊讯息。</p><p>（3）<strong>这本书说得有道理吗？是全部有道理，还是部分有道理？</strong>阅读并理解了一本书后知道了作者的想法，还应该为这本书做个自己的判断。</p><p>（4）<strong>这本书跟你有什么关系？</strong>如果这本书给了你一些资讯，就要问问这些资讯有什么意义。如果这本书启发了你，就要找出相关的、更深的含意或建议，获得更多的启示。</p><p>回答完这四个问题，检视阅读的两个步骤就已经完成了。这时，关于一本书的基础架构和整体内容，你也已能做到心中有数了。但这还不是终点，没有经过阅读的第三个层次分析阅读，就不算真正理解一本书。</p><h3 id="02-如何通过分析阅读读透一本书"><a href="#02-如何通过分析阅读读透一本书" class="headerlink" title="02.如何通过分析阅读读透一本书"></a><strong>02.如何通过分析阅读读透一本书</strong></h3><p>很多人在阅读会遇到无论花多长时间阅读、无论读的有多认真，却仍是无法参透一本书到底在讲什么的境况。这就好像是一个近在身边的人，无论花多长时间与其相处，却总是无法看透他。其实这并不是人难懂、书难懂，而是我们缺乏看透的能力。想要读透一本书，需要达到阅读的第三个层次——分析阅读。</p><p><strong>分析阅读，目的是在较长的阅读时间内，对全书最好最重要的内容细嚼慢咽，反复咀嚼其深意。</strong>分析阅读就是全盘的阅读、完整的阅读，或是说优质的阅读，是读者能做到的最好的阅读方式。</p><p>分析阅读共分为三个阶段，在这个层次的阅读中，读者要紧抓住一本书，一直要读到这本书成为自己的一部分为止。</p><p><strong>分析阅读的第一阶段：找出一本书在谈些什么。</strong></p><p>（1）<strong>依照书的种类与主题来分类。</strong>你一定要知道自己在读的是哪一类书，最好在开始阅读之前就知道。一开始时，用检视阅读先浏览一遍，初步了解这本书。</p><p>（2）<strong>使用最简短的文字说明整本书在谈些什么。</strong>找出这本书的主题或重点，揣测这个作者想要做什么，说出本书的大意。</p><p>（3）<strong>将主要部分按顺序与关联性列举出来。</strong>将全书的大纲列举出来，并将各个部分的大纲也列出来。这一条强调了一本书的复杂性。一本完整的书也是一个完整的个体，当读者掌握了一本书的整体性时，便会立刻抓住其中重要的部分。而这些重要部分同样需要透视阅读，深入了解。</p><p>（4）<strong>确定作者想要解决的问题。</strong>一本书的作者在开始写作时一定是先有一个或多个问题的，而这本书的内容就是对于这些问题的答案。读者的责任就是从书中精确地找出这些问题来，并按照重要性整合出顺序。</p><p>这一阶段，读者可以回答对一本书提出来的第一个问题：这本书大体上来说是在谈论什么。</p><p><strong>分析阅读的第二阶段：诠释一本书的内容规则。</strong></p><p>（5）<strong>诠释作者的关键字，与他达成共识。</strong>找出那些举足轻重的单字，并确认这些单字在使用时的意义，诠释内容与信息。譬如作者用特殊方法来运用的一些字，或是作者强调的字，以及一些专门用语等。</p><p>（6）<strong>由最重要的句子中，抓住作者的重要主旨。</strong>最重要的句子是在整个论述中，阐述作者判断的部分。还有些重要的句子会出现在段落开头或结尾，类似学生时代学习的找文章的主旨句。</p><p>（7）<strong>知道作者的论述是什么，从内容中找出相关的句子，再重新架构出来。</strong>找出书中说明重要论述的段落，从相关段落中整理出前后顺序。</p><p>（8）<strong>找出作者的解答。</strong>确定作者已经解决了哪些问题，还有哪些是没解决的。再判断哪些是作者知道他没解决的问题。</p><p>这一阶段，读者可以回答对一本书提出来的第二个问题：这本书详细的内容是什么？作者是如何写出来的？</p><p><strong>分析阅读的第三阶段：像是沟通知识一样地评论一本书的规则。</strong></p><p>阅读一本书是作者与读者之间的一场对话。读者对作者所教导的内容做出判断和评论，值得表扬或是提出批评。最能学习的读者，也就是最能批评的读者。读者必须懂得如何判断一本书，能在最后对一本书提出回应，对于作者所讨论的问题，努力整理出自己的想法。</p><p><strong>A．智慧礼节的一般规则</strong></p><p>（9）<strong>除非你已经完成大纲架构，也能诠释整本书了，否则不要轻易批评。</strong>在你说出：“我读懂了!”之前，不要说你同意、不同意或暂缓评论。同意或不同意都需要花心力来判断，而不是随意地盲目赞同或无礼批判。</p><p>（10）<strong>不要争强好胜，非辩到底不可。</strong>当你不同意作者的观点时，要理性地表达自己的意见，不要无理地辩驳或争论。此外，读者还应该为自己的观点找出理由来支撑。</p><p>（11）<strong>在说出评论之前，你要能证明自己区别得出真正的知识与个人观点的不同。</strong>尊重知识与个人观点的不同，在作任何评断之前，都要找出理论基础。</p><p><strong>B．批评观点的特别标准</strong></p><p>当读者读懂了一本书，但是却不同意作者时，读者也可以不带偏见的就书中不认同作者的部分做出辩论。书中提出了四种站在作者对立角度来评论一本书的方法，在提出这四种评论时，读者应避免陷入情绪化或偏见的状态。</p><p>（12）<strong>证明作者的知识不足。</strong>意思是指作者缺少某些与他想要解决的问题相关的知识。</p><p>（13）<strong>证明作者的知识错误。</strong>意思是指作者的理念不正确，比如缺乏知识。</p><p>（14）<strong>证明作者不合逻辑。</strong>意思是指作者的推论荒谬，比如缺乏连贯性，或是前后矛盾。</p><p>（15）<strong>证明作者的分析与理由是不完整的。</strong>意思是指作者并没有解决他一开始提出来的所有问题，或是并没能善用他手边的资料，没有看出看出其间的含意与纵横交错的关系。</p><p>在提出这些评论之前，读者要注意的是，一本书不可能所有的内容都是知识不足或知识有误，也不可能全部内容都不合逻辑。要做出批评评论的读者要指出作者存在的问题，并为自己所说的话提出理由。</p><p>这个阶段，读者可以回答对一本书提出来的第三个与第四个问题：这是真实的吗？有意义吗？</p><p>运用分析阅读三个阶段所提出的这些方法和规则，仔细地阅读一本书，而不是浮于表面地阅读大量的书，就是一个好读者能达到的理想境界了。</p><p>当然，许多书都值得精读。但有更多的书只要浏览一下就行了。要成为一个好读者，就要懂得依照一本书的特质，运用不同的阅读技巧来阅读。</p><h3 id="03-阅读的最终目标：主题阅读"><a href="#03-阅读的最终目标：主题阅读" class="headerlink" title="03.阅读的最终目标：主题阅读"></a><strong>03.阅读的最终目标：主题阅读</strong></h3><p>阅读的最后也是最高的层次是主题阅读，即同时阅读数本讲述某种相似概念的书籍，总结归纳比较其中的概念，并从中提出超越这些数本中知识的新的想法。<strong>这是所有阅读中最复杂也最系统化的阅读。</strong></p><p>在做主题阅读时，阅读者会读很多本书，列举出这些书之间相关之处，提出一个所有书都谈到的主题。借助这些书籍，主题阅读者要架构出一个或许在哪一本书里都没提过的主题分析。因此，<strong>主题阅读是最主动、最花费力气的一种阅读，但也是收效最大的一种阅读。</strong></p><p>主题阅读中分为两个阶段：</p><p>一个是<strong>准备阶段的观察研究</strong>，针对你要研究的主题，设计一份试验性的书目，这时可以参考图书馆目录、专家的建议与书中的书目索引。浏览这份书目上所有的书，确定哪些与主题相关，并就这个主题建立起清楚的概念。</p><p>这是做主题阅读的准备工作，对一个特定的问题来说，所牵涉的绝不是一本书而已。因此，在开始之前要先确定好准备研究哪几本书。</p><p>另一个阶段就是<strong>正式进入主题阅读</strong>了，开始阅读第一阶段收集到的所有书籍。在这个阶段，前面提到的阅读第二层次——检视阅读，就是读者在做主题阅读时主要的工具或手段了。</p><p>（1）<strong>找到相关的章节。</strong>在主题阅读中，所确立的主题才是基本的重点，而不是所阅读的书。在这里，阅读的目的是解决问题，而非单纯的阅读这本书。因此，主题阅读的第一步应该是用检视阅读法确定好与主题相关的章节。</p><p>（2）<strong>带引作者与你达到共识。</strong>这一步应该由你来建立其共识，也就是说强迫作者使用你的语言，而不是他的语言。这套语言要能够帮助我们了解所有的作者，并能解决我们的问题。</p><p>（3）<strong>厘清问题。</strong>列出一些可以把我们的问题说得比较明白的问题，然后让作者来回答这些问题。问题的顺序与主题有关，内容涉及从正在研究的概念或现象，到这些概念或现象是如何被发现或表现出来的，最后到前面的这些问题会产生怎样的影响。在这一步，所有的作者，都应该能对这些问题做出回答。尽管答案可能不会相同，但这正也是后续一步所要做的事情。</p><p>（4）<strong>界定议题。</strong>将作者针对各个问题的不同意见整理陈列在各个议题之旁。各个作者之间或之中，不见得一定存在着某个议题。有时候，需要针对一些不是作者主要关心范围的事情，把他的观点解读，才能建构出这种议题。</p><p>（5）<strong>分析讨论。</strong>把问题和议题按顺序排列，以求突显主题。将比较有共通性的议题，放在比较没有共通性的议题之前。各个议题之间的关系也要清楚地界定出来。</p><p>至此，主题阅读就算完成了。前面说过，主题阅读是最为主动的阅读。阅读者基于某种困惑或是亟待解决的问题，主动的向书本求索答案。而这也就是将阅读当作了一种处世指南，用于指导我们的人生航路。</p><p>有一种很古老的测验，目的是帮人们找出对自己而言最有意义的书目。测验是这样的：如果你被警告将在一个无人荒岛度过余生，或至少很长的一段时间，而假设你有时间作一些准备，可以带一些实际有用的物品到岛上，还能带十本书去，你会选哪十本？</p><p>列这样一份书单其实是很有指导性的，因为可以帮助你发现自己最想一读再读的书是哪些。当你想象自己被隔绝在一个没有娱乐、没有资讯、没有可以理解的一般事物的世界时，比较起来你是否会对自己了解得更多一点？这个与世隔绝的岛上没有电视也没有收音机，更没有图书馆，只有你跟十本书。</p><p>在某种程度上，现实中的我们跟被放逐到荒岛上的人没什么两样。我们面对的挑战都是如何找出内在的资源，过更美好的人类生活的挑战。</p><p>《如何阅读一本书》的作者认为，<strong>身体的成长是有限制的，心智的发展却没有限制。心智不会因为到了某个年纪死就停止成长，只有当大脑失去活力，僵化了，才会失去了增加技巧与理解力的力量。</strong></p><p>主动的阅读，不只是对阅读本身有用，也不只是对我们的工作或事业有帮助，更能帮助我们的心智保持活力与成长。</p><p><strong>任何一种超越基础阅读的阅读层次，其核心在于读者要努力提出问题，然后尽可能地找出答案。这是主动阅读中最重要的原则。</strong></p><p>以增进理解力为目的读书，就要真正读懂一本书。要真正完全读懂一本书，就必须把这本书变成自己的一部分才行。</p><p>阅读是一辈子的事情，什么时候开始都不算晚，最重要的是开始</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;《如何阅读一本书》读书笔记&quot;&gt;&lt;a href=&quot;#《如何阅读一本书》读书笔记&quot; class=&quot;headerlink&quot; title=&quot;《如何阅读一本书》读书笔记&quot;&gt;&lt;/a&gt;《如何阅读一本书》读书笔记&lt;/h2&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://ptmapo.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://ptmapo.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>AutoGeneratorCode</title>
    <link href="https://ptmapo.github.io/2020/06/08/Java/AutoGeneratorCode/"/>
    <id>https://ptmapo.github.io/2020/06/08/Java/AutoGeneratorCode/</id>
    <published>2020-06-08T13:50:57.000Z</published>
    <updated>2020-06-08T14:02:16.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatisPlus的AutoGenerator（自动生成代码）"><a href="#MyBatisPlus的AutoGenerator（自动生成代码）" class="headerlink" title="MyBatisPlus的AutoGenerator（自动生成代码）"></a>MyBatisPlus的AutoGenerator（自动生成代码）</h2><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码生成器</span></span><br><span class="line">        AutoGenerator autoGenerator = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        <span class="comment">//全局配置策略</span></span><br><span class="line">        GlobalConfig globalConfig= <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        <span class="comment">//动态获取当前项目的路径</span></span><br><span class="line">        String path= System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        System.out.println(path);</span><br><span class="line">        <span class="comment">//是否覆盖同名文件  默认是false；</span></span><br><span class="line">        globalConfig.setFileOverride(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//不需要ActiveRecode特性的 请改为false</span></span><br><span class="line">        globalConfig.setActiveRecord(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//xml 二级缓存</span></span><br><span class="line">        globalConfig.setEnableCache(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//是否在xml文件中定义resultMap标签</span></span><br><span class="line">        globalConfig.setBaseResultMap(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//是否在xml文件中定义字段列表。   &lt;sql&gt;标签</span></span><br><span class="line">        globalConfig.setBaseColumnList(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置生成代码的输出位置</span></span><br><span class="line">        globalConfig.setOutputDir(path+<span class="string">"/src"</span>);</span><br><span class="line">        <span class="comment">//设置主键生成策略  Auto即是主键自增</span></span><br><span class="line">        globalConfig.setIdType(IdType.AUTO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数据源配置</span></span><br><span class="line">        DataSourceConfig dataSourceConfig = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dataSourceConfig.setUrl(<span class="string">"jdbc:mysql://localhost:3306/tingyu?useSSL=false&amp;userUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2D8"</span>);</span><br><span class="line">        dataSourceConfig.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSourceConfig.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        dataSourceConfig.setDriverName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包配置   生成的目录输出到哪一个包下</span></span><br><span class="line">        PackageConfig packageConfig = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        packageConfig.setParent(<span class="string">"com"</span>)</span><br><span class="line">                .setMapper(<span class="string">"mapper"</span>)</span><br><span class="line">                .setService(<span class="string">"service"</span>)</span><br><span class="line">                .setController(<span class="string">"controller"</span>)</span><br><span class="line">                .setEntity(<span class="string">"entity"</span>)</span><br><span class="line">                .setXml(<span class="string">"mapper"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//策略配置</span></span><br><span class="line">        StrategyConfig strategyConfig = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategyConfig.setCapitalMode(<span class="keyword">true</span>)                     <span class="comment">//是否设置全局大写命名</span></span><br><span class="line">                .setNaming(NamingStrategy.underline_to_camel)   <span class="comment">//设置表明和类名映射方式</span></span><br><span class="line">                .setTablePrefix(<span class="string">"t_"</span>)                           <span class="comment">//设置表名前缀，生成代码时候对应类名会过滤掉前缀</span></span><br><span class="line">                .setInclude(<span class="string">"t_admin"</span>,<span class="string">"t_admin_role"</span>,<span class="string">"t_company"</span>,</span><br><span class="line">                        <span class="string">"t_host"</span>,<span class="string">"t_host_power"</span>,<span class="string">"t_married_person"</span>,</span><br><span class="line">                        <span class="string">"t_menu"</span>,<span class="string">"t_order"</span>,<span class="string">"t_planner"</span>,<span class="string">"t_role"</span>,<span class="string">"t_role_menu"</span>);       <span class="comment">//指定要生成的表格名称，多个表继续传递即可，String类型的可变参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将定义好的配置信息传递到自动生成器</span></span><br><span class="line">        autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line">        autoGenerator.setDataSource(dataSourceConfig);</span><br><span class="line">        autoGenerator.setPackageInfo(packageConfig);</span><br><span class="line">        autoGenerator.setStrategy(strategyConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行，生成代码</span></span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MyBatisPlus的AutoGenerator（自动生成代码）&quot;&gt;&lt;a href=&quot;#MyBatisPlus的AutoGenerator（自动生成代码）&quot; class=&quot;headerlink&quot; title=&quot;MyBatisPlus的AutoGenerator（自动生成代码）&quot;&gt;&lt;/a&gt;MyBatisPlus的AutoGenerator（自动生成代码）&lt;/h2&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://ptmapo.github.io/categories/java/"/>
    
      <category term="ssm" scheme="https://ptmapo.github.io/categories/java/ssm/"/>
    
    
      <category term="java" scheme="https://ptmapo.github.io/tags/java/"/>
    
      <category term="ssm" scheme="https://ptmapo.github.io/tags/ssm/"/>
    
      <category term="MyBatisPlus" scheme="https://ptmapo.github.io/tags/MyBatisPlus/"/>
    
  </entry>
  
  <entry>
    <title>x715quan逆向协议分析</title>
    <link href="https://ptmapo.github.io/2020/06/06/android/x715quan%E9%80%86%E5%90%91%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    <id>https://ptmapo.github.io/2020/06/06/android/x715quan%E9%80%86%E5%90%91%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</id>
    <published>2020-06-06T03:33:15.000Z</published>
    <updated>2020-06-08T01:37:37.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="x715quan逆向协议分析"><a href="#x715quan逆向协议分析" class="headerlink" title="x715quan逆向协议分析"></a>x715quan逆向协议分析</h2><a id="more"></a><p>获取到以下数据，从键值分析nonce，codeSign和access_token三个数值有加密</p><p><img src="https://gitee.com/ptmapo/Img/raw/master/img/roc/20200607214306.png" alt="1"></p><p>将apk放入JEB2进行分析  通过搜索调试定位到</p><h4 id="nonce"><a href="#nonce" class="headerlink" title="nonce"></a>nonce</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">(String arg11, JSONObject arg12, d arg13)</span> </span>&#123;</span><br><span class="line">      String v0 = UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">      <span class="keyword">long</span> v2 = System.currentTimeMillis();</span><br><span class="line">      JSONObject v1 = <span class="keyword">this</span>.a(arg12);</span><br><span class="line">      <span class="keyword">if</span>(MyApplication.getInstance().isLogin()) &#123;</span><br><span class="line">          g.a(arg11, <span class="keyword">new</span> f[]&#123;<span class="keyword">new</span> f(<span class="string">"user_id"</span>, <span class="string">""</span> + MyApplication.getInstance().getUserDataEntity().getUid()), <span class="keyword">new</span> f(<span class="string">"login_token"</span>, <span class="string">""</span> + MyApplication.getInstance().getUserDataEntity().getLogin_token()), <span class="keyword">new</span> f(<span class="string">"nonce"</span>, v0), <span class="keyword">new</span> f(<span class="string">"codeSign"</span>, v.a(v0, v1, MyApplication.getInstance().getUserDataEntity().getUid() + <span class="string">""</span>, v2)), <span class="keyword">new</span> f(<span class="string">"timestamp"</span>, v2 + <span class="string">""</span>), <span class="keyword">new</span> f(<span class="string">"data"</span>, v1.toString()), <span class="keyword">new</span> f(<span class="string">"version"</span>, a.f + <span class="string">""</span>), <span class="keyword">new</span> f(<span class="string">"product_version"</span>, <span class="string">"220"</span>), <span class="keyword">new</span> f(<span class="string">"platform"</span>, Build.PRODUCT + <span class="string">""</span>), <span class="keyword">new</span> f(<span class="string">"network"</span>, MyApplication.getNetworkType() + <span class="string">""</span>), <span class="keyword">new</span> f(<span class="string">"device"</span>, <span class="string">""</span> + MyApplication.getDeviceId()), <span class="keyword">new</span> f(<span class="string">"access_token"</span>, <span class="string">""</span> + a.h), <span class="keyword">new</span> f(<span class="string">"screen_width"</span>, <span class="string">""</span> + a.i), <span class="keyword">new</span> f(<span class="string">"screen_height"</span>, <span class="string">""</span> + a.j), <span class="keyword">new</span> f(<span class="string">"bbsnopic"</span>, MyApplication.isForumNoIMG() + <span class="string">""</span>), <span class="keyword">new</span> f(<span class="string">"system"</span>, <span class="string">"2"</span>), <span class="keyword">new</span> f(<span class="string">"system_version"</span>, Build$VERSION.SDK_INT + <span class="string">""</span>), <span class="keyword">new</span> f(<span class="string">"theme"</span>, a.b + <span class="string">""</span>)&#125;, ((ResultCallback)arg13));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          g.a(arg11, <span class="keyword">new</span> f[]&#123;<span class="keyword">new</span> f(<span class="string">"nonce"</span>, v0), <span class="keyword">new</span> f(<span class="string">"codeSign"</span>, v.a(v0, v1, v2)), <span class="keyword">new</span> f(<span class="string">"timestamp"</span>, v2 + <span class="string">""</span>), <span class="keyword">new</span> f(<span class="string">"data"</span>, v1.toString()), <span class="keyword">new</span> f(<span class="string">"version"</span>, a.f + <span class="string">""</span>), <span class="keyword">new</span> f(<span class="string">"product_version"</span>, <span class="string">"220"</span>), <span class="keyword">new</span> f(<span class="string">"platform"</span>, Build.PRODUCT + <span class="string">""</span>), <span class="keyword">new</span> f(<span class="string">"network"</span>, MyApplication.getNetworkType() + <span class="string">""</span>), <span class="keyword">new</span> f(<span class="string">"device"</span>, <span class="string">""</span> + MyApplication.getDeviceId()), <span class="keyword">new</span> f(<span class="string">"access_token"</span>, <span class="string">""</span> + a.h), <span class="keyword">new</span> f(<span class="string">"screen_width"</span>, <span class="string">""</span> + a.i), <span class="keyword">new</span> f(<span class="string">"screen_height"</span>, <span class="string">""</span> + a.j), <span class="keyword">new</span> f(<span class="string">"bbsnopic"</span>, MyApplication.isForumNoIMG() + <span class="string">""</span>), <span class="keyword">new</span> f(<span class="string">"system"</span>, <span class="string">"2"</span>), <span class="keyword">new</span> f(<span class="string">"system_version"</span>, Build$VERSION.SDK_INT + <span class="string">""</span>), <span class="keyword">new</span> f(<span class="string">"theme"</span>, a.b + <span class="string">""</span>)&#125;, ((ResultCallback)arg13));</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可知nonce原为UUID，用replaceAll替换了“-”变为无符号的格式；</p><h4 id="codeSign"><a href="#codeSign" class="headerlink" title="codeSign"></a>codeSign</h4><p><strong>if中</strong> new f(“codeSign”, v.a(v0, v1, MyApplication.getInstance().getUserDataEntity().getUid() + “”, v2)),</p><p><strong>else中</strong> new f(“codeSign”, v.a(v0, v1, v2)),</p><p>v0：nonce的值</p><p>v1： 由new f(“data”, v1.toString())得知是数据中data的值</p><p>v2：当前时间戳 数据中的timestamp</p><p>进入v.a（）方法，获得如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">a</span><span class="params">(String arg3, JSONObject arg4, String arg5, <span class="keyword">long</span> arg6)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r.a(arg4.toString() + arg3 + v.a() + arg6 + arg5).toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">a</span><span class="params">(String arg4, JSONObject arg5, <span class="keyword">long</span> arg6)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r.a(arg5.toString() + arg4 + v.a() + arg6).toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.a(af.b(<span class="number">2131230990</span>), <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">a</span><span class="params">(String arg2, String arg3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> af.a(arg2 + arg3, af.b(<span class="number">2131231233</span>));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>进入af.b方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">b</span><span class="params">(<span class="keyword">int</span> arg1)</span> </span>&#123;</span><br><span class="line">    String v0_1;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        v0_1 = MyApplication.getInstance().getResources().getString(arg1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Exception v0) &#123;</span><br><span class="line">        v0.printStackTrace();</span><br><span class="line">        v0_1 = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v0_1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据方法可知2131230990和的2131231233值隐藏在资源文件中；</p><p>将数字转为16进制后再resources—values—public中搜索7f08010e 找到</p> <public id="0x7f08010e" name="forum_key" type="string" /><p>根据类型在strings.xml中找到同名变量：</p><string name="forum_key">        94ac5cfb69e87bd7</string><p>同理获得2131231233的资源值是：860f50db3569e448</p><p>进入af.a方法中 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">a</span><span class="params">(String arg2, String arg3)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StringBuffer(arg2 + arg3).reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个参数相加并reverse可得：844e9653bd05f0687db78e96bfc5ca49</p><p>进入r.a可知是md5加密，所以结果是</p><p>(data+nonce+844e9653bd05f0687db78e96bfc5ca49+timestamp).toUpperCase();</p><h4 id="access-token"><a href="#access-token" class="headerlink" title="access_token"></a>access_token</h4><p> new f(“access_token”, “” + a.h)</p><p>进入a.h后得到 a.h = r.a(v0);</p><p>String v0 = a.f + Build.PRODUCT + MyApplication.getNetworkType() + MyApplication.getDeviceId();</p><p>此时也可使用log输出获得v0的值</p><p>在apk用解压工具打开，移动出classes.dex并在逆向助手中反编译dex，根据上面这个方法的包名获取地址package com.quan0715.forum.b;在a.smali中找到了此方法，对照这个变量下面添加    invoke-static {v0}, Lcrack;-&gt;log(Ljava/lang/String;)V     然后将crack.smali放入dex根目录，再重新用逆向助手重打包，并替换apk中的dex文件并重新安装此apk；如果apk安装失败重新签名即可。</p><p>打开ddms 获取此应用的log信息 由log信息获得v0的值是version+platform+network+device；</p><p>然后进行md5加密即可得token值</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;x715quan逆向协议分析&quot;&gt;&lt;a href=&quot;#x715quan逆向协议分析&quot; class=&quot;headerlink&quot; title=&quot;x715quan逆向协议分析&quot;&gt;&lt;/a&gt;x715quan逆向协议分析&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Android逆向" scheme="https://ptmapo.github.io/categories/Android%E9%80%86%E5%90%91/"/>
    
      <category term="协议分析" scheme="https://ptmapo.github.io/categories/Android%E9%80%86%E5%90%91/%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android逆向" scheme="https://ptmapo.github.io/tags/Android%E9%80%86%E5%90%91/"/>
    
      <category term="协议分析" scheme="https://ptmapo.github.io/tags/%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>vpy加密视频破解转mp4-JAVA代码实现</title>
    <link href="https://ptmapo.github.io/2020/06/04/share/vpy%E5%8A%A0%E5%AF%86%E8%A7%86%E9%A2%91%E7%A0%B4%E8%A7%A3%E8%BD%ACmp4-JAVA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://ptmapo.github.io/2020/06/04/share/vpy%E5%8A%A0%E5%AF%86%E8%A7%86%E9%A2%91%E7%A0%B4%E8%A7%A3%E8%BD%ACmp4-JAVA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-06-04T04:21:28.000Z</published>
    <updated>2020-06-05T15:46:09.281Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vpy加密视频破解转mp4-JAVA代码实现"><a href="#vpy加密视频破解转mp4-JAVA代码实现" class="headerlink" title="vpy加密视频破解转mp4-JAVA代码实现"></a>vpy加密视频破解转mp4-JAVA代码实现</h3><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHex</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件转字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] fileToByte(String filePath) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bFile = Files.readAllBytes(<span class="keyword">new</span> File(filePath).toPath());</span><br><span class="line">            <span class="keyword">return</span> bFile;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 16进制string转字节数组</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toBytes(String str) &#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span> || str.trim().equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[str.length() / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length() / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            String subStr = str.substring(i * <span class="number">2</span>, i * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">            subStr=xor(subStr,<span class="string">"05"</span>);</span><br><span class="line">            bytes[i] = (<span class="keyword">byte</span>) Integer.parseInt(subStr, <span class="number">16</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试字节数组完整性  #取消</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writerFile</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">            BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                File file = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\qqq\\Desktop\\新建文件夹\\test.txt"</span>);</span><br><span class="line">                <span class="comment">/* 先创建文件*/</span></span><br><span class="line">                <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                    file.createNewFile();</span><br><span class="line">                &#125;</span><br><span class="line">                FileWriter fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">                bw = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line">                bw.write(<span class="string">""</span>);</span><br><span class="line">                bw.write(str);</span><br><span class="line">                System.out.println(<span class="string">"写入成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                ioe.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(bw != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        bw.close();&#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"Error in closing the BufferedWriter"</span> + ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异或</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strHex_X</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strHex_Y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">xor</span><span class="params">(String strHex_X,String strHex_Y)</span></span>&#123;</span><br><span class="line">        <span class="comment">//将x、y转成二进制形式</span></span><br><span class="line">        String anotherBinary=Integer.toBinaryString(Integer.valueOf(strHex_X,<span class="number">16</span>));</span><br><span class="line">        String thisBinary=Integer.toBinaryString(Integer.valueOf(strHex_Y,<span class="number">16</span>));</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">//判断是否为8位二进制，否则左补零</span></span><br><span class="line">        <span class="keyword">if</span>(anotherBinary.length() != <span class="number">8</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = anotherBinary.length(); i &lt;<span class="number">8</span>; i++) &#123;</span><br><span class="line">                anotherBinary = <span class="string">"0"</span>+anotherBinary;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(thisBinary.length() != <span class="number">8</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = thisBinary.length(); i &lt;<span class="number">8</span>; i++) &#123;</span><br><span class="line">                thisBinary = <span class="string">"0"</span>+thisBinary;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//异或运算</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;anotherBinary.length();i++)&#123;</span><br><span class="line">            <span class="comment">//如果相同位置数相同，则补0，否则补1</span></span><br><span class="line">            <span class="keyword">if</span>(thisBinary.charAt(i)==anotherBinary.charAt(i)) &#123;</span><br><span class="line">                result += <span class="string">"0"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                result+=<span class="string">"1"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.toHexString(Integer.parseInt(result, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字节数组转文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getFileByBytes</span><span class="params">(<span class="keyword">byte</span>[] bytes, String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        File file = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File dir = <span class="keyword">new</span> File(filePath);</span><br><span class="line">            <span class="keyword">if</span> (!dir.exists() &amp;&amp; dir.isDirectory()) &#123;<span class="comment">// 判断文件目录是否存在</span></span><br><span class="line">                dir.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            file = <span class="keyword">new</span> File(filePath + <span class="string">"\\"</span> + fileName);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">            bos.write(bytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字节数组转16进制String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">bytesToHexFun3</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        StringBuilder buf = <span class="keyword">new</span> StringBuilder(bytes.length * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">byte</span> b : bytes) &#123;</span><br><span class="line">            <span class="comment">// 使用String的format方法进行转换</span></span><br><span class="line">            buf.append(String.format(<span class="string">"%02x"</span>, <span class="keyword">new</span> Integer(b &amp; <span class="number">0xff</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buf.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beforeFilePath    原始文件目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath      转换完成后的文件目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName      转换完成后的新文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">vpyToMP4</span><span class="params">(String beforeFilePath,String filePath,String fileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取文件初始字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] arr = fileToByte(beforeFilePath);</span><br><span class="line">        <span class="comment">//获取字节数组中的16进制字符串</span></span><br><span class="line">        String hexStr = bytesToHexFun3(arr);</span><br><span class="line">        <span class="comment">//截取050505后的16进制</span></span><br><span class="line">        hexStr = hexStr.substring(hexStr.indexOf(<span class="string">"050505"</span>), hexStr.length());</span><br><span class="line">        <span class="comment">//转换回字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = toBytes(hexStr);</span><br><span class="line">        getFileByBytes(bytes, filePath, fileName);</span><br><span class="line">        System.out.println(fileName+<span class="string">"-----转换完成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vpy加密视频破解转mp4-JAVA代码实现&quot;&gt;&lt;a href=&quot;#vpy加密视频破解转mp4-JAVA代码实现&quot; class=&quot;headerlink&quot; title=&quot;vpy加密视频破解转mp4-JAVA代码实现&quot;&gt;&lt;/a&gt;vpy加密视频破解转mp4-JAVA代码实现&lt;/h3&gt;
    
    </summary>
    
    
      <category term="技术分享" scheme="https://ptmapo.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="技术分享" scheme="https://ptmapo.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>20200516 每日记录</title>
    <link href="https://ptmapo.github.io/2020/06/04/diary/20200516%E8%AE%B0%E5%BD%95/"/>
    <id>https://ptmapo.github.io/2020/06/04/diary/20200516%E8%AE%B0%E5%BD%95/</id>
    <published>2020-06-04T04:10:14.000Z</published>
    <updated>2020-06-07T15:32:33.586Z</updated>
    
    <content type="html"><![CDATA[<p><strong>每日记录</strong></p><a id="more"></a><p><strong>1 mybatis映射文件中的autoMapping用处是什么</strong></p><p>自动映射</p><p><strong>2  多表联查</strong></p><p><strong>3</strong></p><p><u><strong>varStatus</strong></u>是&lt;c:forEach&gt;jstl循环标签的一个属性，varStatus属性。就拿varStatus=“status”来说，事实上定义了一个status名的对象作为varStatus的绑定值。该绑定值也就是status封装了当前遍历的状态，比如，可以从该对象上查看是遍历到了第几个元素：${status.count}</p><p><strong>4</strong> 是第一次回调函数后的for循环中，如果你再次发送请求，for循环并不会停止，即使你写了同步请求也不行。</p><p>但是如果你在声明for循环变量用let后，代码会直到你请求完毕，回调函数执行完毕后，再进行下一次的循环。</p><p>这就考虑到了一个闭包的问题，如果你写var和let声明的作用域不同。</p><p><strong><u>let</u></strong> i 会以局部变量的形式传递</p><p><u><strong>var</strong></u> i 会以全局变量的形式传递</p><p>如果要想将 i 变量传递给下一层，要使用let 去声明。</p><p><strong>5 判断几个选项是否有选择一项 （校验）</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-0e25e5eb4013c6fbfb862b4e48e23b4143a.png" alt="img"></p><p><strong>6 frameset标签不能和body共存 ？？？</strong></p><p>FRAMESET 元素是 FRAME 元素的容器。HTML 文档可包含 FRAMESET 元素或 BODY 元素之一，而不能同时包含两者。</p><p><strong>7  n+1</strong></p><p> select语句的数目太多，需要频繁的访问数据库，会影响检索性能。如果需要查询n个Customer对象，那么必须执行<u>n+1次</u>select查询语句。这就是经典的n+1次select查询问题。 这种检索策略没有利用SQL的连接查询功能</p><p><strong>8， forward和redirect的区别</strong></p><p>forward 重定向:</p><p>1,重定向会改变浏览器地址栏地址</p><p>2,重定向不止可以访问服务器内的资源,还可以访问外部连接</p><p>3重定向因为是两次请求,所以重定向不能使用request来访问资源和共享数据,因为request的作用域是一次请求内,</p><p>redirect 请求转发:</p><p>1,不会改变浏览器地址栏信息</p><p> 2,只能访问服务器内部资源</p><p> 3,是一次请求.所以可以使用request共享数据 </p><p><strong>9. resultMap标签</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-877248f913d41e5733bf0aa30ddbc5077ff.png" alt="img"></p><p><strong>10  /**</strong></p><p>/* 是拦截所有的文件夹，不包含子文件夹</p><p>/** 是拦截所有的文件夹及里面的子文件夹</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;每日记录&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="每日记录" scheme="https://ptmapo.github.io/categories/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95/"/>
    
      <category term="ssm" scheme="https://ptmapo.github.io/categories/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95/ssm/"/>
    
    
      <category term="ssm" scheme="https://ptmapo.github.io/tags/ssm/"/>
    
      <category term="每日记录" scheme="https://ptmapo.github.io/tags/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>mysql之DQL</title>
    <link href="https://ptmapo.github.io/2020/06/03/mysql/mysq%E4%BA%8C%20DQL/"/>
    <id>https://ptmapo.github.io/2020/06/03/mysql/mysq%E4%BA%8C%20DQL/</id>
    <published>2020-06-03T13:22:32.000Z</published>
    <updated>2020-06-04T04:49:44.436Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DQL-数据查询语言"><a href="#DQL-数据查询语言" class="headerlink" title="DQL(数据查询语言)"></a>DQL(数据查询语言)</h3><ul><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 列名(多列间逗号，全部列用*) from 表名 [where 过滤条件 group by 分组查询 having 分组后的过滤 order by 排序 limit 分页];</span><br></pre></td></tr></table></figure><a id="more"></a></li></ul><h4 id="1-简单的条件条件查询："><a href="#1-简单的条件条件查询：" class="headerlink" title="1.简单的条件条件查询："></a><strong>1.简单的条件条件查询：</strong></h4><ul><li>查询所有数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student(表名)</span><br></pre></td></tr></table></figure><ul><li>带条件查询</li></ul><p>可以使用的条件：&lt; , &lt;= , = , &gt; , &gt;= , != , &lt;&gt; , in , between…and… , and , or ,not , is null , like 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">-- 查询编号为1004的学生的姓名和生日  </span><br><span class="line">    select name,birthday from student where id&#x3D;1004;</span><br><span class="line">-- 查询年龄大于18的学生信息  </span><br><span class="line">    select * from student where age&gt;18;</span><br><span class="line">-- 查询小明的成绩  </span><br><span class="line">select name,score from student where name&#x3D;&#39;小明&#39;;</span><br><span class="line">-- 查询年龄在18到20之间的所有学生  </span><br><span class="line">    select * from student where age&gt;18 and age&lt;20;</span><br><span class="line">    select * from student where age between 18 and 20; </span><br><span class="line">-- 查询除了1003外的所有学生信息  </span><br><span class="line">    select * from student where id !&#x3D; 1003;</span><br><span class="line">    select * from student where id &lt;&gt; 1003;</span><br><span class="line">-- 查询编号为1005或者年龄为18的学生信息  </span><br><span class="line">    select * from student where id&#x3D;1005 or age&#x3D;18;</span><br><span class="line">-- 查询编号为1003和编号为1005的学生信息  </span><br><span class="line">    select * from student where id&#x3D;1003 and id&#x3D;1005;</span><br><span class="line">    select * from student where id in(1003,1005);</span><br><span class="line">-- 查询编号不是1003和1005的学生信息  </span><br><span class="line">    select * from student where id not in(1003,1005);</span><br><span class="line">-- 查询所有姓张的学生信息, 可以使用like关键字进行模糊查询  </span><br><span class="line">   --like关键字需要配合通配符使用  </span><br><span class="line">   --通配符有两个: %(任意个任意字符), _(任意一个字符)  </span><br><span class="line">    select * from student where name like &#39;张%&#39;;</span><br><span class="line">-- 查询名字中带国的学生信息  </span><br><span class="line">    select * from student where name like &#39;%国%&#39;;</span><br><span class="line">-- 查询名字第二个字符为明的学生信息  </span><br><span class="line">    select * from student where name like &#39;_明%&#39;;</span><br><span class="line">-- 查询缺考学生的信息, score没有值, 不是为0  </span><br><span class="line">    select * from student where score is null;</span><br><span class="line">-- 查询没有缺考的学生信息  </span><br><span class="line">    select * from student where score is not null;</span><br><span class="line">    select * from student where not score is null;</span><br></pre></td></tr></table></figure><h4 id="2-select子句"><a href="#2-select子句" class="headerlink" title="2.select子句"></a>2.select子句</h4><p>select子句的作用是选择要查询的列，还包括以下功能：</p><ul><li>可以在select子句中进行运算；</li><li>可以用distinct过滤重复的行数据；</li><li>可以给列起别名。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 运算  </span><br><span class="line">-- null不参与运算, 结果都是null  </span><br><span class="line">   select name,score,scoer+10 from student;</span><br><span class="line">-- 可以给列定义别名, 使用as关键字, 可以省略  </span><br><span class="line">-- 别名最好不要出现特殊字符, 中文也不建议使用  </span><br><span class="line">   select name, score, score+10 as new_score from student;  </span><br><span class="line">   select name, score, score+10 new_score from student;  </span><br><span class="line">   select name, score, score+10 &#39;成绩&#39; from student; </span><br><span class="line">-- ifnull函数，类似于java中的三目运算符，用于处理空值null，如果某个字段为null，则使用给定的值进行替换</span><br><span class="line">   select name, score, IFNULL(score,0)+10 new_score from student;  </span><br><span class="line">-- 查询所有学生的年龄  </span><br><span class="line">   select distinct age from student;</span><br></pre></td></tr></table></figure><h4 id="3-排序"><a href="#3-排序" class="headerlink" title="3.排序"></a>3.排序</h4><p>使用order by子句可以进行结果的排序，需要配合两个关键字一起使用：</p><p>​      ASC ，升序 ，ascending （ 默认值 ）</p><p>​      DESC ，降序 , descending 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--查询所有学生信息，按照id进行升序排序</span><br><span class="line">  select * from student order by id asc;</span><br><span class="line">--查看年龄为20的学生信息，按照id降序排序</span><br><span class="line">  select * from student order by id desc;</span><br><span class="line">--可以按照别名进行排序</span><br><span class="line">--查询所有学生的新成绩，并按照新成绩排名</span><br><span class="line">  select name,score+10 new_score from student order by new_score desc;</span><br><span class="line">--order by 后可以写数字，代表第几列(一般不用) </span><br><span class="line">  select * from student order by 6;</span><br><span class="line">--rand（）函数，生成随机数，范围是[0，1）</span><br><span class="line">--配合rand函数可以进行数据的随机排序，打乱数据,洗牌.</span><br><span class="line">  select * from student order by rand();</span><br><span class="line">--查询所有学生的信息，按照年龄降序排序，如果年龄相同，再按照id降序排序</span><br><span class="line">  select * from student order by age desc,id desc;</span><br></pre></td></tr></table></figure><h4 id="4-分组函数"><a href="#4-分组函数" class="headerlink" title="4.分组函数"></a>4.分组函数</h4><p>分组函数用于对查询结果进行统计，共有5个，返回结果是一个值。count() ，sum()，max()，min()，avg()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--分组函数使用时，null值不进行统计</span><br><span class="line">--统计所有学生的人数</span><br><span class="line">  select count(*) from student;</span><br><span class="line">  select count(id) from student;</span><br><span class="line">--查询总分，最低分数和最高分数及平均分数</span><br><span class="line">  select sum(score),min(score),max(score),avg(score) from student;</span><br></pre></td></tr></table></figure><h4 id="5-分组查询"><a href="#5-分组查询" class="headerlink" title="5.分组查询"></a>5.分组查询</h4><p>分组查询使用group by子句实现，分组查询后需要注意以下几点：</p><p>​    1.select子句只能查询分组字段和分组函数。</p><p>​    2.可以使用where在分组前条件过滤。</p><p>​    3.可以使用having在分组后进行条件过滤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 按照性别进行分组, 分别统计男女同学的人数和平均成绩</span><br><span class="line">   select gender,count(*) cnt,avg(score) avg_score from student group by gender;</span><br><span class="line">-- 按照性别进行分组，分别统计男女同学的人数和平均成绩，排除成绩低于70的学生信息</span><br><span class="line">   select gender,count(*) cnt,avg(score) avg_score from student where score&gt;&#x3D;70 group by gender; </span><br><span class="line">-- 按照年龄进行分组，分别统计不同年龄同学的人数和平均成绩，排除人数小于2的分组信息</span><br><span class="line">-- where和having的区别在于where中无法使用分组函数，而having中可以使用</span><br><span class="line">   select age, count(*) cnt, avg(score) avg_score from student group by age having count(*)&gt;&#x3D;2;</span><br><span class="line">   select age, count(*) cnt, avg(score) avg_score from student group by age having cnt&gt;&#x3D;2;</span><br></pre></td></tr></table></figure><h4 id="6-分页查询"><a href="#6-分页查询" class="headerlink" title="6.分页查询"></a>6.分页查询</h4><p>  MySQL中，可以通过limit关键词实现分页查询，limit是MySQL的特有语法，limit后面需要跟两个参数，第一个参数是查询的起始索引（从0开始），第二个参数是查询的记录数，limit必须出现在SQL的末尾。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--每页显示两条学生信息，完成分页显示</span><br><span class="line">--page：第几页</span><br><span class="line">--size：每页显示几条数据</span><br><span class="line">  select * from student order by id limit (page-1) * size, size;</span><br><span class="line">--第一页</span><br><span class="line">  select * from student order by id limit 0,2;</span><br><span class="line">--第二页</span><br><span class="line">  select * from student order by id limit 2,2;</span><br><span class="line">--第三页</span><br><span class="line">  select * from student order by id limit 4,2;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;DQL-数据查询语言&quot;&gt;&lt;a href=&quot;#DQL-数据查询语言&quot; class=&quot;headerlink&quot; title=&quot;DQL(数据查询语言)&quot;&gt;&lt;/a&gt;DQL(数据查询语言)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;语法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select 列名(多列间逗号，全部列用*) from 表名 [where 过滤条件 group by 分组查询 having 分组后的过滤 order by 排序 limit 分页];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://ptmapo.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://ptmapo.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql 基础知识及DDL,DML</title>
    <link href="https://ptmapo.github.io/2020/06/02/mysql/mysql-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%8F%8ADDL-DML/"/>
    <id>https://ptmapo.github.io/2020/06/02/mysql/mysql-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%8F%8ADDL-DML/</id>
    <published>2020-06-02T09:03:13.000Z</published>
    <updated>2020-06-04T09:49:16.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MYSQL基础"><a href="#MYSQL基础" class="headerlink" title="MYSQL基础"></a>MYSQL基础</h2><p>  cmd操作指令：mysql -u用户名 -p密码 -h主机地址 -P端口号<br>  -u ：user<br>  -p ：password  隐式输入无需在-p后加密码<br> -h  ：host   默认是localhost<br> -P  ：port   mysql默认是3306</p><p><strong>定义</strong></p><a id="more"></a><p>SQL： Structured Query language    结构化查询语言</p><p><strong>规范</strong></p><p>一条语句要以分号（;）结束</p><p>sql可以单行和多行书写，一般通过缩进和换行书写提高代码可读性</p><p>sql的关键词一般都要全大写</p><p><strong>分类</strong></p><p><strong>DDL</strong>（Data Defination Language）  数据定义语言 </p><p>用于操作数据库常用对象，例如数据库 表格等，常用的关键字：CREATE（创建）； ALTER（修改）  ； DROP（删除）等</p><p><strong>DML</strong>（Data Manipulation Language）数据操作语言</p><p>用于对表格进行增删改操作，常用关键字：INSERT（增）  ； DELETE（删）  ；  UPDATE （改）等</p><p><strong>DQL</strong>（Data Query Language） 数据查询语言</p><p>用于对表格进行查询操作 ，常用关键字： SELECT（查）  ； WHERE（条件）  ；  FROM（位置）等</p><p><strong>DCL</strong>（Data Control Language） 数据控制语言</p><p>用于对权限的控制 ，常用关键字 ： GRANT(授权)   REVOKE（撤销）</p><h3 id="操作Database"><a href="#操作Database" class="headerlink" title="操作Database"></a>操作Database</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看所有的database</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure><p><strong>创建database</strong></p><pre><code>- 直接创建：create database 名称;- 指定编码方式创建： create database 名称 character set utf8;- 如果数据库不存在则创建：create database if not exists 名称;</code></pre><p><strong>使用database</strong><br>     - use 数据库名<br> <strong>修改database</strong><br>     - alter database 名称 character set gbk;<br><strong>删除database</strong><br>     - 直接删除：drop database 名称;<br>    - 如果存在则删除：drop database if exists 名称;</p><h3 id="操作table"><a href="#操作table" class="headerlink" title="操作table"></a>操作table</h3><p>*<em>1.查询当前database下所有可用的table   *</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p><strong>2.mysql中常用的数据类型</strong></p><p><strong>在MySQL中，有三种主要类型：Text（文本），Number（数字），Date/Time（日期/时间）类型。</strong></p><p><strong>Text类型：</strong></p><ul><li>常用类型：<ul><li>CHAR(size) ：括号中指定字符串长度，最多255个字符。不可变字符串，性能好，但占用空间是固定的。</li><li>VARCHAR(size)：括号中指定字符串长度，最多255个字符可变字符串，如果长度大于255则被转换为TEXT类型。可变字符串性能差，但占用空间是可变的。</li><li>TEXT ：不需要指定长度，用于存放大文本数据。</li></ul></li></ul><p><strong>Number类型</strong></p><ul><li>常用类型：<ul><li>INT(size)：括号中指定最大位数。4个字节。</li><li>TINYINT(size)：-128到127。0到255 无符号。括号中指定最大位数。1个字节，如果长度为1，通常用于表示boolean，1-&gt;true,  0-&gt;false。</li><li>BIGINT(size)：括号中指定最大位数，8个字节。</li><li>FLOAT(size,d)：size指定最大位数，d指定小数点右侧的最大位数。存放带有浮动小数点的小数字，4个字节。</li><li>DOUBLE(size,d)：size指定最大位数，d指定小数点右侧的最大位数。存放带有浮动小数点的大数字，8个字节。</li></ul></li></ul><p><strong>Date/Time类型：</strong><br>常用类型：<br>DATE() ：格式：YYYY-MM-DD  年月日。<br>DATE() ：格式：YYYY-MM-DD HH : MM : SS   年月日时分秒。<br><strong>3.创建表格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table 表名 （</span><br><span class="line"></span><br><span class="line">        列名 列类型，</span><br><span class="line"></span><br><span class="line">        列名 列类型，    </span><br><span class="line"></span><br><span class="line">        列名 列类型</span><br><span class="line"></span><br><span class="line">）;</span><br></pre></td></tr></table></figure><p><strong>4.查看表格结构</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名字；</span><br></pre></td></tr></table></figure><p><strong>5.修改表格</strong></p><ul><li><p>修改表名</p><pre><code>alter table 原表名 rename to 新表名；</code></pre></li><li><p>修改字段（列）的类型</p><pre><code>alter table 表名 modify 列名 类型；</code></pre></li><li><p>修改字段名 </p><pre><code>alter table 表名 change 原列名 新列名 类型；</code></pre></li><li><p>增加字段</p><pre><code>alter table 表名 add（列名 类型，....）;</code></pre></li><li><p>删除字段</p><pre><code>alter table 表名 drop column 列名;</code></pre></li></ul><p><strong>6.删除表格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table [if exists] 表名;</span><br></pre></td></tr></table></figure><h3 id="DML操作"><a href="#DML操作" class="headerlink" title="DML操作"></a>DML操作</h3><p><strong>新增数据：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into (列名1，列名2，列名3) values (值1，值2，值3);</span><br></pre></td></tr></table></figure><p>列和值要一一对应,多个数据逗号隔开。</p><p>列可以省略，表示所有的列都要增加数据</p><p>数据的类型要和列的类型一致，除了数字以外，其他数据都需要加引号（单引号或双引号）</p><p><strong>修改数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set 列1&#x3D;值1，列2&#x3D;值2 [where 条件];</span><br></pre></td></tr></table></figure><p><strong>删除数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dalete from 表名 [where 条件];        效率低可回滚。</span><br><span class="line">truncate table 表名;       如果要删除整个表的数据，建议使用truncate。效率高不可回滚。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MYSQL基础&quot;&gt;&lt;a href=&quot;#MYSQL基础&quot; class=&quot;headerlink&quot; title=&quot;MYSQL基础&quot;&gt;&lt;/a&gt;MYSQL基础&lt;/h2&gt;&lt;p&gt;  cmd操作指令：mysql -u用户名 -p密码 -h主机地址 -P端口号&lt;br&gt;  -u ：user&lt;br&gt;  -p ：password  隐式输入无需在-p后加密码&lt;br&gt; -h  ：host   默认是localhost&lt;br&gt; -P  ：port   mysql默认是3306&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://ptmapo.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://ptmapo.github.io/tags/mysql/"/>
    
  </entry>
  
</feed>
