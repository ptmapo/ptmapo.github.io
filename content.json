{"pages":[{"title":"","text":"唐艺昕 李沁 李一桐 gakki 图片搜集于互联网，侵权请留言，马上处理😊。","link":"/album/index.html"},{"title":"关于我","text":"---不断升级中--- 如有疑问 请联系Q:37663015","link":"/about/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://raw.githubusercontent.com/ptmapo/Img/master/avatar.png 网站名称：ptmapo 网站地址：1997888.xyz 网站简介：后端开发，技术分享 加载中，稍等几秒...","link":"/friend/index.html"},{"title":"","text":"碎碎念 tips：github登录后按时间正序查看、可点赞加❤️、本插件地址..「+99次查看」 var gitalk = new Gitalk({ clientID: '46a9f3481b46ea0129d8', clientSecret: '79c7c9cb847e141757d7864453bcbf89f0655b24', id: '666666', repo: 'issue_database', owner: 'removeif', admin: \"removeif\", createIssueManually: true, distractionFreeMode: false }) gitalk.render('comment-container1')","link":"/self-talking/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"}],"posts":[{"title":"vpy加密视频破解转mp4-JAVA代码实现","text":"vpy加密视频破解转mp4-JAVA代码实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175import java.io.*;import java.nio.file.Files;public class TestHex { /** * 文件转字节数组 * @param filePath * @return * @throws IOException */ public static byte[] fileToByte(String filePath) throws IOException { byte[] bFile = Files.readAllBytes(new File(filePath).toPath()); return bFile; } /** * 16进制string转字节数组 * @param str * @return */ public static byte[] toBytes(String str) { if(str == null || str.trim().equals(\"\")) { return new byte[0]; } byte[] bytes = new byte[str.length() / 2]; for(int i = 0; i &lt; str.length() / 2; i++) { String subStr = str.substring(i * 2, i * 2 + 2); subStr=xor(subStr,\"05\"); bytes[i] = (byte) Integer.parseInt(subStr, 16); } return bytes; } /** * 测试字节数组完整性 #取消 * @param str */ public static void writerFile(String str) { BufferedWriter bw = null; try { File file = new File(\"C:\\\\Users\\\\qqq\\\\Desktop\\\\新建文件夹\\\\test.txt\"); /* 先创建文件*/ if (!file.exists()) { file.createNewFile(); } FileWriter fw = new FileWriter(file); bw = new BufferedWriter(fw); bw.write(\"\"); bw.write(str); System.out.println(\"写入成功\"); } catch (IOException ioe) { ioe.printStackTrace(); } finally { try { if(bw != null){ bw.close();} } catch (Exception ex) { System.out.println(\"Error in closing the BufferedWriter\" + ex); } } } /** * 异或 * @param strHex_X * @param strHex_Y * @return */ private static String xor(String strHex_X,String strHex_Y){ //将x、y转成二进制形式 String anotherBinary=Integer.toBinaryString(Integer.valueOf(strHex_X,16)); String thisBinary=Integer.toBinaryString(Integer.valueOf(strHex_Y,16)); String result = \"\"; //判断是否为8位二进制，否则左补零 if(anotherBinary.length() != 8){ for (int i = anotherBinary.length(); i &lt;8; i++) { anotherBinary = \"0\"+anotherBinary; } } if(thisBinary.length() != 8){ for (int i = thisBinary.length(); i &lt;8; i++) { thisBinary = \"0\"+thisBinary; } } //异或运算 for(int i=0;i&lt;anotherBinary.length();i++){ //如果相同位置数相同，则补0，否则补1 if(thisBinary.charAt(i)==anotherBinary.charAt(i)) { result += \"0\"; }else{ result+=\"1\"; } } return Integer.toHexString(Integer.parseInt(result, 2)); } /** * 字节数组转文件 * @param bytes * @param filePath * @param fileName */ public static void getFileByBytes(byte[] bytes, String filePath, String fileName) { BufferedOutputStream bos = null; FileOutputStream fos = null; File file = null; try { File dir = new File(filePath); if (!dir.exists() &amp;&amp; dir.isDirectory()) {// 判断文件目录是否存在 dir.mkdirs(); } file = new File(filePath + \"\\\\\" + fileName); fos = new FileOutputStream(file); bos = new BufferedOutputStream(fos); bos.write(bytes); } catch (Exception e) { e.printStackTrace(); } finally { if (bos != null) { try { bos.close(); } catch (IOException e) { e.printStackTrace(); } } if (fos != null) { try { fos.close(); } catch (IOException e) { e.printStackTrace(); } } } } /** * 字节数组转16进制String * @param bytes * @return */ public static String bytesToHexFun3(byte[] bytes) { StringBuilder buf = new StringBuilder(bytes.length * 2); for(byte b : bytes) { // 使用String的format方法进行转换 buf.append(String.format(\"%02x\", new Integer(b &amp; 0xff))); } return buf.toString(); } /** * 主方法 * @param beforeFilePath 原始文件目录 * @param filePath 转换完成后的文件目录 * @param fileName 转换完成后的新文件名 * @throws Exception */ public static void vpyToMP4(String beforeFilePath,String filePath,String fileName) throws Exception { //获取文件初始字节数组 byte[] arr = fileToByte(beforeFilePath); //获取字节数组中的16进制字符串 String hexStr = bytesToHexFun3(arr); //截取050505后的16进制 hexStr = hexStr.substring(hexStr.indexOf(\"050505\"), hexStr.length()); //转换回字节数组 byte[] bytes = toBytes(hexStr); getFileByBytes(bytes, filePath, fileName); System.out.println(fileName+\"-----转换完成\"); }}","link":"/2020/06/04/share/vpy%E5%8A%A0%E5%AF%86%E8%A7%86%E9%A2%91%E7%A0%B4%E8%A7%A3%E8%BD%ACmp4-JAVA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"},{"title":"2020.5.16 每日记录","text":"每日记录 1 mybatis映射文件中的autoMapping用处是什么 自动映射 2 多表联查 3 varStatus是&lt;c:forEach&gt;jstl循环标签的一个属性，varStatus属性。就拿varStatus=“status”来说，事实上定义了一个status名的对象作为varStatus的绑定值。该绑定值也就是status封装了当前遍历的状态，比如，可以从该对象上查看是遍历到了第几个元素：${status.count} 4 是第一次回调函数后的for循环中，如果你再次发送请求，for循环并不会停止，即使你写了同步请求也不行。 但是如果你在声明for循环变量用let后，代码会直到你请求完毕，回调函数执行完毕后，再进行下一次的循环。 这就考虑到了一个闭包的问题，如果你写var和let声明的作用域不同。 let i 会以局部变量的形式传递 var i 会以全局变量的形式传递 如果要想将 i 变量传递给下一层，要使用let 去声明。 5 判断几个选项是否有选择一项 （校验） 6 frameset标签不能和body共存 ？？？ FRAMESET 元素是 FRAME 元素的容器。HTML 文档可包含 FRAMESET 元素或 BODY 元素之一，而不能同时包含两者。 7 n+1 select语句的数目太多，需要频繁的访问数据库，会影响检索性能。如果需要查询n个Customer对象，那么必须执行n+1次select查询语句。这就是经典的n+1次select查询问题。 这种检索策略没有利用SQL的连接查询功能 8， forward和redirect的区别 forward 重定向: 1,重定向会改变浏览器地址栏地址 2,重定向不止可以访问服务器内的资源,还可以访问外部连接 3重定向因为是两次请求,所以重定向不能使用request来访问资源和共享数据,因为request的作用域是一次请求内, redirect 请求转发: 1,不会改变浏览器地址栏信息 2,只能访问服务器内部资源 3,是一次请求.所以可以使用request共享数据 9. resultMap标签 10 /** /* 是拦截所有的文件夹，不包含子文件夹 /** 是拦截所有的文件夹及里面的子文件夹","link":"/2020/06/04/diary/2020.5.16%20/"},{"title":"mysql 基础知识及DDL,DML","text":"MYSQL基础 cmd操作指令：mysql -u用户名 -p密码 -h主机地址 -P端口号 -u ：user -p ：password 隐式输入无需在-p后加密码 -h ：host 默认是localhost -P ：port mysql默认是3306 定义 SQL： Structured Query language 结构化查询语言 规范 一条语句要以分号（;）结束 sql可以单行和多行书写，一般通过缩进和换行书写提高代码可读性 sql的关键词一般都要全大写 分类 DDL（Data Defination Language） 数据定义语言 用于操作数据库常用对象，例如数据库 表格等，常用的关键字：CREATE（创建）； ALTER（修改） ； DROP（删除）等 DML（Data Manipulation Language）数据操作语言 用于对表格进行增删改操作，常用关键字：INSERT（增） ； DELETE（删） ； UPDATE （改）等 DQL（Data Query Language） 数据查询语言 用于对表格进行查询操作 ，常用关键字： SELECT（查） ； WHERE（条件） ； FROM（位置）等 DCL（Data Control Language） 数据控制语言 用于对权限的控制 ，常用关键字 ： GRANT(授权) REVOKE（撤销） 操作Database12查看所有的databaseshow databases; 创建database - 直接创建：create database 名称; - 指定编码方式创建： create database 名称 character set utf8; - 如果数据库不存在则创建：create database if not exists 名称;使用database - use 数据库名 修改database - alter database 名称 character set gbk;删除database - 直接删除：drop database 名称; - 如果存在则删除：drop database if exists 名称; 操作table*1.查询当前database下所有可用的table * 1show tables; 2.mysql中常用的数据类型 在MySQL中，有三种主要类型：Text（文本），Number（数字），Date/Time（日期/时间）类型。 Text类型： 常用类型： CHAR(size) ：括号中指定字符串长度，最多255个字符。不可变字符串，性能好，但占用空间是固定的。 VARCHAR(size)：括号中指定字符串长度，最多255个字符可变字符串，如果长度大于255则被转换为TEXT类型。可变字符串性能差，但占用空间是可变的。 TEXT ：不需要指定长度，用于存放大文本数据。 Number类型 常用类型： INT(size)：括号中指定最大位数。4个字节。 TINYINT(size)：-128到127。0到255 无符号。括号中指定最大位数。1个字节，如果长度为1，通常用于表示boolean，1-&gt;true, 0-&gt;false。 BIGINT(size)：括号中指定最大位数，8个字节。 FLOAT(size,d)：size指定最大位数，d指定小数点右侧的最大位数。存放带有浮动小数点的小数字，4个字节。 DOUBLE(size,d)：size指定最大位数，d指定小数点右侧的最大位数。存放带有浮动小数点的大数字，8个字节。 Date/Time类型：常用类型：DATE() ：格式：YYYY-MM-DD 年月日。DATE() ：格式：YYYY-MM-DD HH : MM : SS 年月日时分秒。3.创建表格 123456789create table 表名 （ 列名 列类型， 列名 列类型， 列名 列类型）; 4.查看表格结构 1desc 表名字； 5.修改表格 修改表名 alter table 原表名 rename to 新表名； 修改字段（列）的类型 alter table 表名 modify 列名 类型； 修改字段名 alter table 表名 change 原列名 新列名 类型； 增加字段 alter table 表名 add（列名 类型，....）; 删除字段 alter table 表名 drop column 列名; 6.删除表格 1drop table [if exists] 表名; DML操作新增数据： 1insert into (列名1，列名2，列名3) values (值1，值2，值3); 列和值要一一对应,多个数据逗号隔开。 列可以省略，表示所有的列都要增加数据 数据的类型要和列的类型一致，除了数字以外，其他数据都需要加引号（单引号或双引号） 修改数据 1update 表名 set 列1=值1，列2=值2 [where 条件]; 删除数据 12dalete from 表名 [where 条件]; 效率低可回滚。truncate table 表名; 如果要删除整个表的数据，建议使用truncate。效率高不可回滚。","link":"/2020/06/02/mysql/mysql-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%8F%8ADDL-DML/"},{"title":"mysql之DQL","text":"DQL(数据查询语言) 语法： 1select 列名(多列间逗号，全部列用*) from 表名 [where 过滤条件 group by 分组查询 having 分组后的过滤 order by 排序 limit 分页]; 1.简单的条件条件查询： 查询所有数据 1select * from student(表名) 带条件查询 可以使用的条件：&lt; , &lt;= , = , &gt; , &gt;= , != , &lt;&gt; , in , between…and… , and , or ,not , is null , like 。 1234567891011121314151617181920212223242526272829303132-- 查询编号为1004的学生的姓名和生日 select name,birthday from student where id=1004;-- 查询年龄大于18的学生信息 select * from student where age&gt;18;-- 查询小明的成绩 select name,score from student where name='小明';-- 查询年龄在18到20之间的所有学生 select * from student where age&gt;18 and age&lt;20; select * from student where age between 18 and 20; -- 查询除了1003外的所有学生信息 select * from student where id != 1003; select * from student where id &lt;&gt; 1003;-- 查询编号为1005或者年龄为18的学生信息 select * from student where id=1005 or age=18;-- 查询编号为1003和编号为1005的学生信息 select * from student where id=1003 and id=1005; select * from student where id in(1003,1005);-- 查询编号不是1003和1005的学生信息 select * from student where id not in(1003,1005);-- 查询所有姓张的学生信息, 可以使用like关键字进行模糊查询 --like关键字需要配合通配符使用 --通配符有两个: %(任意个任意字符), _(任意一个字符) select * from student where name like '张%';-- 查询名字中带国的学生信息 select * from student where name like '%国%';-- 查询名字第二个字符为明的学生信息 select * from student where name like '_明%';-- 查询缺考学生的信息, score没有值, 不是为0 select * from student where score is null;-- 查询没有缺考的学生信息 select * from student where score is not null; select * from student where not score is null; 2.select子句select子句的作用是选择要查询的列，还包括以下功能： 可以在select子句中进行运算； 可以用distinct过滤重复的行数据； 可以给列起别名。 123456789101112-- 运算 -- null不参与运算, 结果都是null select name,score,scoer+10 from student;-- 可以给列定义别名, 使用as关键字, 可以省略 -- 别名最好不要出现特殊字符, 中文也不建议使用 select name, score, score+10 as new_score from student; select name, score, score+10 new_score from student; select name, score, score+10 '成绩' from student; -- ifnull函数，类似于java中的三目运算符，用于处理空值null，如果某个字段为null，则使用给定的值进行替换 select name, score, IFNULL(score,0)+10 new_score from student; -- 查询所有学生的年龄 select distinct age from student; 3.排序使用order by子句可以进行结果的排序，需要配合两个关键字一起使用： ​ ASC ，升序 ，ascending （ 默认值 ） ​ DESC ，降序 , descending 。 1234567891011121314--查询所有学生信息，按照id进行升序排序 select * from student order by id asc;--查看年龄为20的学生信息，按照id降序排序 select * from student order by id desc;--可以按照别名进行排序--查询所有学生的新成绩，并按照新成绩排名 select name,score+10 new_score from student order by new_score desc;--order by 后可以写数字，代表第几列(一般不用) select * from student order by 6;--rand（）函数，生成随机数，范围是[0，1）--配合rand函数可以进行数据的随机排序，打乱数据,洗牌. select * from student order by rand();--查询所有学生的信息，按照年龄降序排序，如果年龄相同，再按照id降序排序 select * from student order by age desc,id desc; 4.分组函数分组函数用于对查询结果进行统计，共有5个，返回结果是一个值。count() ，sum()，max()，min()，avg()。 123456--分组函数使用时，null值不进行统计--统计所有学生的人数 select count(*) from student; select count(id) from student;--查询总分，最低分数和最高分数及平均分数 select sum(score),min(score),max(score),avg(score) from student; 5.分组查询分组查询使用group by子句实现，分组查询后需要注意以下几点： ​ 1.select子句只能查询分组字段和分组函数。 ​ 2.可以使用where在分组前条件过滤。 ​ 3.可以使用having在分组后进行条件过滤。 12345678-- 按照性别进行分组, 分别统计男女同学的人数和平均成绩 select gender,count(*) cnt,avg(score) avg_score from student group by gender;-- 按照性别进行分组，分别统计男女同学的人数和平均成绩，排除成绩低于70的学生信息 select gender,count(*) cnt,avg(score) avg_score from student where score&gt;=70 group by gender; -- 按照年龄进行分组，分别统计不同年龄同学的人数和平均成绩，排除人数小于2的分组信息-- where和having的区别在于where中无法使用分组函数，而having中可以使用 select age, count(*) cnt, avg(score) avg_score from student group by age having count(*)&gt;=2; select age, count(*) cnt, avg(score) avg_score from student group by age having cnt&gt;=2; 6.分页查询 MySQL中，可以通过limit关键词实现分页查询，limit是MySQL的特有语法，limit后面需要跟两个参数，第一个参数是查询的起始索引（从0开始），第二个参数是查询的记录数，limit必须出现在SQL的末尾。 12345678910--每页显示两条学生信息，完成分页显示--page：第几页--size：每页显示几条数据 select * from student order by id limit (page-1) * size, size;--第一页 select * from student order by id limit 0,2;--第二页 select * from student order by id limit 2,2;--第三页 select * from student order by id limit 4,2;","link":"/2020/06/03/mysql/mysq%E4%BA%8C%20DQL/"}],"tags":[{"name":"技术分享","slug":"技术分享","link":"/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"},{"name":"每日记录，ssm","slug":"每日记录，ssm","link":"/tags/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95%EF%BC%8Cssm/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"}],"categories":[{"name":"技术分享","slug":"技术分享","link":"/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"},{"name":"每日记录","slug":"每日记录","link":"/categories/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95/"},{"name":"mysql","slug":"mysql","link":"/categories/mysql/"},{"name":"ssm","slug":"每日记录/ssm","link":"/categories/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95/ssm/"}]}